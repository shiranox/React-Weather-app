{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../api/routes\";\nimport http from \"../api/httpService\";\nimport fakeData from \"../fakeData\";\nimport constants from \"../constants/globalConstants\"; // Slice\n\nconst slice = createSlice({\n  name: \"favorites\",\n  initialState: {\n    favorites: {},\n    loading: false,\n    error: \"\",\n    errors: false\n  },\n  reducers: {\n    addToFavoritesSuccess: (state, action) => {\n      state.favorites = { ...state.favorites,\n        [action.payload.Key]: action.payload\n      };\n      state.loading = false;\n      state.errors = false;\n    },\n    addToFavoritesError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n    removeFavoriteSuccess: (state, action) => {\n      delete state.favorites[action.payload.Key];\n      state.loading = false;\n      state.errors = false;\n    },\n    removeFavoriteError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    }\n  }\n});\nexport default slice.reducer; // Actions\n\nconst {\n  addToFavoritesSuccess,\n  addToFavoritesError,\n  removeFavoriteSuccess,\n  removeFavoriteError\n} = slice.actions;\nexport const addToFavorites = location => async dispatch => {\n  try {\n    const res = await http.get(`${api.WEATHER}/${location.Key}?apikey=${constants.API_KEY}`);\n    let data = { ...location,\n      data: res.data[0]\n    };\n    dispatch(addToFavoritesSuccess(data));\n  } catch (e) {\n    let temp = { ...location,\n      data: fakeData.CurrentWeather\n    };\n    dispatch(addToFavoritesSuccess(temp)); //dispatch(addToFavoritesError(e));\n  }\n};\nexport const removeFavorites = location => async dispatch => {\n  try {\n    dispatch(removeFavoriteSuccess(location));\n  } catch (e) {\n    dispatch(removeFavoriteError(e.message));\n  }\n};","map":{"version":3,"sources":["C:/Users/shira/Desktop/New folder/src/store/favorites.js"],"names":["createSlice","api","http","fakeData","constants","slice","name","initialState","favorites","loading","error","errors","reducers","addToFavoritesSuccess","state","action","payload","Key","addToFavoritesError","removeFavoriteSuccess","removeFavoriteError","reducer","actions","addToFavorites","location","dispatch","res","get","WEATHER","API_KEY","data","e","temp","CurrentWeather","removeFavorites","message"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../api/routes\";\nimport http from \"../api/httpService\";\nimport fakeData from \"../fakeData\";\nimport constants from \"../constants/globalConstants\";\n\n// Slice\nconst slice = createSlice({\n  name: \"favorites\",\n  initialState: {\n    favorites: {},\n    loading: false,\n    error: \"\",\n    errors: false,\n  },\n  reducers: {\n    addToFavoritesSuccess: (state, action) => {\n      state.favorites = {\n        ...state.favorites,\n        [action.payload.Key]: action.payload,\n      };\n      state.loading = false;\n      state.errors = false;\n    },\n    addToFavoritesError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n    removeFavoriteSuccess: (state, action) => {\n      delete state.favorites[action.payload.Key];\n      state.loading = false;\n      state.errors = false;\n    },\n    removeFavoriteError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n  },\n});\nexport default slice.reducer;\n// Actions\nconst {\n  addToFavoritesSuccess,\n  addToFavoritesError,\n  removeFavoriteSuccess,\n  removeFavoriteError,\n} = slice.actions;\n\nexport const addToFavorites = (location) => async (dispatch) => {\n  try {\n    const res = await http.get(\n      `${api.WEATHER}/${location.Key}?apikey=${constants.API_KEY}`\n    );\n    let data = { ...location, data: res.data[0] };\n    dispatch(addToFavoritesSuccess(data));\n  } catch (e) {\n    let temp = {\n      ...location,\n      data: fakeData.CurrentWeather,\n    };\n\n    dispatch(addToFavoritesSuccess(temp));\n    //dispatch(addToFavoritesError(e));\n  }\n};\n\nexport const removeFavorites = (location) => async (dispatch) => {\n  try {\n    dispatch(removeFavoriteSuccess(location));\n  } catch (e) {\n    dispatch(removeFavoriteError(e.message));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}