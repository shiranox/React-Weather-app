{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../api/routes\";\nimport http from \"../api/httpService\";\nimport constants from \"../constants/globalConstants\"; // Slice\n\nconst slice = createSlice({\n  name: \"location\",\n  initialState: {\n    locations: null,\n    currentLocation: null,\n    loading: false,\n    error: \"\",\n    errors: false\n  },\n  reducers: {\n    getLocationsSuccess: (state, action) => {\n      state.locations = action.payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    getLocationsError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n    setCurrentLocationSuccess: (state, action) => {\n      state.currentLocation = action.payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    setCurrentLocationError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    }\n  }\n});\nexport default slice.reducer; // Actions\n\nconst {\n  getLocationsSuccess,\n  getLocationsError,\n  setCurrentLocationSuccess,\n  setCurrentLocationError\n} = slice.actions;\nexport const getLocations = search => async dispatch => {\n  try {\n    const res = await http.get(`${api.LOCATIONS}?apikey=${constants.API_KEY}&q=${encodeURIComponent(search)}`);\n    dispatch(getLocationsSuccess(res.data));\n  } catch (e) {\n    dispatch(getLocationsError(e.message));\n  }\n};\nexport const setCurrentLocation = locationKey => async dispatch => {\n  try {\n    const res = await http.get(`${api.LOCATION}/${locationKey}?apikey=${constants.API_KEY}`);\n    dispatch(setCurrentLocationSuccess(res.data));\n  } catch (e) {\n    dispatch(setCurrentLocationError(e.message));\n  }\n};","map":{"version":3,"sources":["C:/Users/shira/Desktop/New folder/src/store/location.js"],"names":["createSlice","api","http","constants","slice","name","initialState","locations","currentLocation","loading","error","errors","reducers","getLocationsSuccess","state","action","payload","getLocationsError","setCurrentLocationSuccess","setCurrentLocationError","reducer","actions","getLocations","search","dispatch","res","get","LOCATIONS","API_KEY","encodeURIComponent","data","e","message","setCurrentLocation","locationKey","LOCATION"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../api/routes\";\nimport http from \"../api/httpService\";\nimport constants from \"../constants/globalConstants\";\n\n// Slice\nconst slice = createSlice({\n  name: \"location\",\n  initialState: {\n    locations: null,\n    currentLocation: null,\n    loading: false,\n    error: \"\",\n    errors: false,\n  },\n  reducers: {\n    getLocationsSuccess: (state, action) => {\n      state.locations = action.payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    getLocationsError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n    setCurrentLocationSuccess: (state, action) => {\n      state.currentLocation = action.payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    setCurrentLocationError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n  },\n});\nexport default slice.reducer;\n// Actions\nconst {\n  getLocationsSuccess,\n  getLocationsError,\n  setCurrentLocationSuccess,\n  setCurrentLocationError,\n} = slice.actions;\n\nexport const getLocations = (search) => async (dispatch) => {\n  try {\n    const res = await http.get(\n      `${api.LOCATIONS}?apikey=${constants.API_KEY}&q=${encodeURIComponent(\n        search\n      )}`\n    );\n    dispatch(getLocationsSuccess(res.data));\n  } catch (e) {\n    dispatch(getLocationsError(e.message));\n  }\n};\n\nexport const setCurrentLocation = (locationKey) => async (dispatch) => {\n  try {\n    const res = await http.get(\n      `${api.LOCATION}/${locationKey}?apikey=${constants.API_KEY}`\n    );\n    dispatch(setCurrentLocationSuccess(res.data));\n  } catch (e) {\n    dispatch(setCurrentLocationError(e.message));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}