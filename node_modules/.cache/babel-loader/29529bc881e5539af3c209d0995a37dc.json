{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../api/routes\";\nimport http from \"../api/httpService\";\nimport constants from \"../constants/globalConstants\";\nconst slice = createSlice({\n  name: \"weather\",\n  initialState: {\n    currentWeather: {},\n    dailyWeather: null,\n    loading: false,\n    error: \"\",\n    errors: false\n  },\n  reducers: {\n    request: (state, action) => {\n      state.loading = true;\n      state.errors = false;\n    },\n    getDailyWeatherSuccess: (state, action) => {\n      state.dailyWeather = action.payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    getDailyWeatherError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n    getCurrentWeatherSuccess: (state, action) => {\n      state.currentWeather = action.payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    getCurrentWeatherError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    }\n  }\n});\nexport default slice.reducer;\nconst {\n  getDailyWeatherSuccess,\n  getDailyWeatherError,\n  getCurrentWeatherSuccess,\n  getCurrentWeatherError,\n  request\n} = slice.actions;\nexport const getDailyWeather = locationKey => async dispatch => {\n  try {\n    dispatch(request());\n    const res = await http.get(`${api.WEATHER_DAILY}/${locationKey}?apikey=${constants.API_KEY}`);\n    dispatch(getDailyWeatherSuccess(res.data));\n  } catch (e) {\n    dispatch(getDailyWeatherError(e.message));\n  }\n};\nexport const getCurrentWeather = (locationKey, metric) => async dispatch => {\n  try {\n    const res = await http.get(`${api.WEATHER}/${locationKey}?apikey=${constants.API_KEY}&metric=${metric}`);\n    dispatch(getCurrentWeatherSuccess(res.data[0]));\n  } catch (e) {\n    dispatch(getCurrentWeatherError(e.message));\n  }\n};","map":{"version":3,"sources":["C:/Users/shira/Desktop/New folder/src/store/weather.js"],"names":["createSlice","api","http","constants","slice","name","initialState","currentWeather","dailyWeather","loading","error","errors","reducers","request","state","action","getDailyWeatherSuccess","payload","getDailyWeatherError","getCurrentWeatherSuccess","getCurrentWeatherError","reducer","actions","getDailyWeather","locationKey","dispatch","res","get","WEATHER_DAILY","API_KEY","data","e","message","getCurrentWeather","metric","WEATHER"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../api/routes\";\nimport http from \"../api/httpService\";\nimport constants from \"../constants/globalConstants\";\n\nconst slice = createSlice({\n  name: \"weather\",\n  initialState: {\n    currentWeather: {},\n    dailyWeather: null,\n    loading: false,\n    error: \"\",\n    errors: false,\n  },\n  reducers: {\n    request: (state, action) => {\n      state.loading = true;\n      state.errors = false;\n    },\n    getDailyWeatherSuccess: (state, action) => {\n      state.dailyWeather = action.payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    getDailyWeatherError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n    getCurrentWeatherSuccess: (state, action) => {\n      state.currentWeather = action.payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    getCurrentWeatherError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.errors = true;\n    },\n  },\n});\nexport default slice.reducer;\nconst {\n  getDailyWeatherSuccess,\n  getDailyWeatherError,\n  getCurrentWeatherSuccess,\n  getCurrentWeatherError,\n  request,\n} = slice.actions;\n\nexport const getDailyWeather = (locationKey) => async (dispatch) => {\n  try {\n    dispatch(request());\n    const res = await http.get(\n      `${api.WEATHER_DAILY}/${locationKey}?apikey=${constants.API_KEY}`\n    );\n    dispatch(getDailyWeatherSuccess(res.data));\n  } catch (e) {\n    dispatch(getDailyWeatherError(e.message));\n  }\n};\n\nexport const getCurrentWeather = (locationKey, metric) => async (dispatch) => {\n  try {\n    const res = await http.get(\n      `${api.WEATHER}/${locationKey}?apikey=${constants.API_KEY}&metric=${metric}`\n    );\n    dispatch(getCurrentWeatherSuccess(res.data[0]));\n  } catch (e) {\n    dispatch(getCurrentWeatherError(e.message));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}